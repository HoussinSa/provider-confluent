// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RegionInitParameters struct {

	// The ID of the Environment that the Schema Registry cluster belongs to, for example, env-abc123.
	// The unique identifier for the Schema Registry Region.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type RegionObservation struct {

	// The ID of the Environment that the Schema Registry cluster belongs to, for example, env-abc123.
	// The unique identifier for the Schema Registry Region.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type RegionParameters struct {

	// The ID of the Environment that the Schema Registry cluster belongs to, for example, env-abc123.
	// The unique identifier for the Schema Registry Region.
	// +kubebuilder:validation:Optional
	ID *string `json:"id" tf:"id,omitempty"`
}

type SchemaRegistryClusterEnvironmentInitParameters struct {

	// The ID of the Environment that the Schema Registry cluster belongs to, for example, env-abc123.
	// The unique identifier for the environment.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SchemaRegistryClusterEnvironmentObservation struct {

	// The ID of the Environment that the Schema Registry cluster belongs to, for example, env-abc123.
	// The unique identifier for the environment.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SchemaRegistryClusterEnvironmentParameters struct {

	// The ID of the Environment that the Schema Registry cluster belongs to, for example, env-abc123.
	// The unique identifier for the environment.
	// +kubebuilder:validation:Optional
	ID *string `json:"id" tf:"id,omitempty"`
}

type SchemaRegistryClusterInitParameters struct {

	// supports the following:
	// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
	Environment []SchemaRegistryClusterEnvironmentInitParameters `json:"environment,omitempty" tf:"environment,omitempty"`

	// The type of the billing package. Accepted values are: ESSENTIALS and ADVANCED.
	// The billing package.
	Package *string `json:"package,omitempty" tf:"package,omitempty"`

	// supports the following:
	Region []RegionInitParameters `json:"region,omitempty" tf:"region,omitempty"`
}

type SchemaRegistryClusterObservation struct {

	// An API Version of the schema version of the Schema Registry cluster, for example, srcm/v2.
	// API Version defines the schema version of this representation of a Schema Registry Cluster.
	APIVersion *string `json:"apiVersion,omitempty" tf:"api_version,omitempty"`

	// The name of the Schema Registry cluster, for example, Stream Governance Package.
	// The name of the Schema Registry Cluster.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// supports the following:
	// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
	Environment []SchemaRegistryClusterEnvironmentObservation `json:"environment,omitempty" tf:"environment,omitempty"`

	// The ID of the Environment that the Schema Registry cluster belongs to, for example, env-abc123.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A kind of the Schema Registry cluster, for example, Cluster.
	// Kind defines the object Schema Registry Cluster represents.
	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`

	// The type of the billing package. Accepted values are: ESSENTIALS and ADVANCED.
	// The billing package.
	Package *string `json:"package,omitempty" tf:"package,omitempty"`

	// supports the following:
	Region []RegionObservation `json:"region,omitempty" tf:"region,omitempty"`

	// The Confluent Resource Name of the Schema Registry cluster, for example, crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa/environment=env-abc123/schema-registry=lsrc-abc123.
	// The Confluent Resource Name of the Schema Registry Cluster.
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	// The HTTP endpoint of the Schema Registry cluster, for example, https://psrc-00000.us-west-2.aws.confluent.cloud.
	// The API endpoint of the Schema Registry Cluster.
	RestEndpoint *string `json:"restEndpoint,omitempty" tf:"rest_endpoint,omitempty"`
}

type SchemaRegistryClusterParameters struct {

	// supports the following:
	// Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
	// +kubebuilder:validation:Optional
	Environment []SchemaRegistryClusterEnvironmentParameters `json:"environment,omitempty" tf:"environment,omitempty"`

	// The type of the billing package. Accepted values are: ESSENTIALS and ADVANCED.
	// The billing package.
	// +kubebuilder:validation:Optional
	Package *string `json:"package,omitempty" tf:"package,omitempty"`

	// supports the following:
	// +kubebuilder:validation:Optional
	Region []RegionParameters `json:"region,omitempty" tf:"region,omitempty"`
}

// SchemaRegistryClusterSpec defines the desired state of SchemaRegistryCluster
type SchemaRegistryClusterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SchemaRegistryClusterParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SchemaRegistryClusterInitParameters `json:"initProvider,omitempty"`
}

// SchemaRegistryClusterStatus defines the observed state of SchemaRegistryCluster.
type SchemaRegistryClusterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SchemaRegistryClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SchemaRegistryCluster is the Schema for the SchemaRegistryClusters API.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,confluent}
type SchemaRegistryCluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.environment) || (has(self.initProvider) && has(self.initProvider.environment))",message="spec.forProvider.environment is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.__package__) || (has(self.initProvider) && has(self.initProvider.__package__))",message="spec.forProvider.package is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.region) || (has(self.initProvider) && has(self.initProvider.region))",message="spec.forProvider.region is a required parameter"
	Spec   SchemaRegistryClusterSpec   `json:"spec"`
	Status SchemaRegistryClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SchemaRegistryClusterList contains a list of SchemaRegistryClusters
type SchemaRegistryClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SchemaRegistryCluster `json:"items"`
}

// Repository type metadata.
var (
	SchemaRegistryCluster_Kind             = "SchemaRegistryCluster"
	SchemaRegistryCluster_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SchemaRegistryCluster_Kind}.String()
	SchemaRegistryCluster_KindAPIVersion   = SchemaRegistryCluster_Kind + "." + CRDGroupVersion.String()
	SchemaRegistryCluster_GroupVersionKind = CRDGroupVersion.WithKind(SchemaRegistryCluster_Kind)
)

func init() {
	SchemeBuilder.Register(&SchemaRegistryCluster{}, &SchemaRegistryClusterList{})
}
